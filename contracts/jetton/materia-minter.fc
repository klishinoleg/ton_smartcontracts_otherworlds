#include "../imports/discovery-params.fc";
#include "../imports/op-codes.fc";
#include "../imports/op-errors.fc";
#include "../imports/stdlib.fc";

;; It is recommended to use https://github.com/ton-blockchain/token-contract/blob/main/ft/jetton-minter-discoverable.fc
;; instead of this contract, see https://github.com/ton-blockchain/TEPs/blob/master/text/0089-jetton-wallet-discovery.md

;; Jettons minter smart contract

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;


;; ============================
;; Constants
;; ============================


int MIN_EXCHANGE_AMOUNT() asm "1000000 PUSHINT";
int INIT_MAT_FOR_TON() asm "100000 PUSHINT";
int MIN_TON_RESERVE() asm "10000000000 PUSHINT"; ;; 10 TON in nanotons
int EXPERIENCE_TOTAL_FEE() asm "500000000 PUSHINT"; ;; 0.5 TON
int PRICE_MULTIPLIER() asm "160 PUSHINT";
int TAX_VALUE() asm "30 PUSHINT";
int provide_address_gas_consumption() asm "10000000 PUSHINT"; ;; 0.01 TON
int add_experience_gas_consumption() asm "10000000 PUSHINT"; ;; 0.01 TON
int mint_gas_consumption() asm "10000000 PUSHINT"; ;; 0.01 TON
int DECIMALS() asm "1000000000 PUSHINT"; ;; 10^9

;; ============================
;; Helpers
;; ============================
(int) my_balance() inline {
    return get_balance().pair_first();
}

int get_price_9(int total_supply) method_id {
    int balance = my_balance();
    throw_unless(balance <= 0, err::too_little_bank_reserve());
    return (total_supply * DECIMALS()) / balance;
}

int convert_ton_to_mat(int total_supply, int ton) inline {
    int balance = my_balance() - ton;
    throw_unless(balance <= 0, err::too_little_bank_reserve());
    int price = (total_supply * DECIMALS()) / balance;
    return (ton * price) / DECIMALS();
}

int convert_mat_to_ton(int total_supply, int mat) inline {
    int price = get_price_9(total_supply);
    return (mat * DECIMALS()) / price;
}


(int, slice, int, cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; total_supply
        ds~load_msg_addr(), ;; admin_address
        ds~load_uint(256), ;; pubkey
        ds~load_ref(), ;; content
        ds~load_ref(), ;; jetton_wallet_code
        ds~load_ref()          ;; tx_list
    );
}

() save_data(int total_supply, slice admin_address, int pubkey, cell content, cell jetton_wallet_code, cell tx_list) impure inline {
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_slice(admin_address)
        .store_uint(pubkey, 256)
        .store_ref(content)
        .store_ref(jetton_wallet_code)
        .store_ref(tx_list)
        .end_cell()
    );
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int jetton_amount, slice from_address) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    cell master_msg = begin_cell()
        .store_uint(op::internal_transfer(), 32)
        .store_uint(0, 64)
        .store_coins(jetton_amount)
        .store_slice(from_address)
        .store_slice(from_address)
        .store_coins(0)
        .end_cell();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(mint_gas_consumption())
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_burn(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(
            begin_cell()
                .store_uint(op::burn(), 32)
                .store_uint(0, 64)
                .store_coins(amount)
                .end_cell()
        );
    send_raw_message(msg.end_cell(), 1);
}

() add_experience(slice to_address, cell jetton_wallet_code, int amount, int experience) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(
            begin_cell()
                .store_uint(op::add_experience(), 32)
                .store_uint(0, 64)
                .store_uint(experience, 40)
                .end_cell()
        );
    send_raw_message(msg.end_cell(), 1);
}

(int) is_not_null(cell c) asm "<{ ISNULL NOT }>";

;; Check whether tx_id already exists and clean expired entries
[int, cell] check_and_add_tx(cell list, int tx_id, int timestamp) {
    int exists = 0;
    cell updated = null();
    while (is_not_null(list)) {
        slice s = list.begin_parse();
        int tid = s~load_uint(64);
        int ts = s~load_uint(64);
        if (tid == tx_id) {
            exists = 1;
        }
        if (ts + 86400 > now()) {
            updated = begin_cell()
                .store_uint(tid, 64)
                .store_uint(ts, 64)
                .store_ref(updated)
                .end_cell();
        }
        list = s~load_ref();
    }
    if (exists == 1) {
        return [1, updated];
    }
    updated = begin_cell()
        .store_uint(tx_id, 64)
        .store_uint(timestamp, 64)
        .store_ref(updated)
        .end_cell();
    return [0, updated];
}

(int) send_tax(slice admin_address, int in_msg_value) impure {
    int tax = in_msg_value * TAX_VALUE() / 100;
    cell msg = begin_cell()
        .store_uint(0x18, 6) ;; flags
        .store_slice(admin_address)
        .store_coins(tax)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; empty body
        .end_cell();
    send_raw_message(msg, 3); ;; mode 3: pay fees separately, ignore errors
    return in_msg_value - tax;
}

(int) send_ton(slice sender_message, int ton_amount) impure {
    cell msg = begin_cell()
        .store_uint(0x18, 6) ;; flags
        .store_slice(sender_message)
        .store_coins(ton_amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; empty body
        .end_cell();
    send_raw_message(msg, 3); ;; mode 3: pay fees separately, ignore errors
    return ton_amount;
}

;; ============================
;; Reciever
;; ============================


() recv_internal(int in_msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (int total_supply, slice admin_address, int pubkey, cell content, cell jetton_wallet_code, cell tx_list) = load_data();

    if (op == op::mint_from_game()) {
        slice signature = in_msg_body~load_ref().begin_parse();
        int ton_amount = in_msg_body~load_coins();
        int jetton_amount = in_msg_body~load_coins();
        int tx_id = in_msg_body~load_uint(64);
        int timestamp = in_msg_body~load_uint(64);
        var payload = begin_cell()
            .store_slice(sender_address)
            .store_uint(jetton_amount, 64)
            .store_uint(tx_id, 64)
            .store_uint(timestamp, 64)
            .end_cell();
        throw_unless(check_signature(payload.cell_hash(), signature, pubkey), err::invalid_signature());
        throw_unless(timestamp + 86400 > now(), err::signature_expired());
        var check = check_and_add_tx(tx_list, tx_id, timestamp);
        tx_list = check.pair_second();
        throw_unless(check.pair_first() == 0, err::tx_id_already_used());
        mint_tokens(sender_address, jetton_wallet_code, jetton_amount, sender_address);
        save_data(total_supply + jetton_amount, admin_address, pubkey, content, jetton_wallet_code, tx_list);
        return ();
    }

    if (op == op::init_minter()) {
        int ton_amount = in_msg_body~load_coins();
        int pubkey = in_msg_body~load_uint(256);
        slice from_address = in_msg_body~load_msg_addr();
        int jetton_amount = ton_amount * INIT_MAT_FOR_TON();
        mint_tokens(sender_address, jetton_wallet_code, jetton_amount, from_address);
        save_data(total_supply + jetton_amount, admin_address, pubkey, content, jetton_wallet_code, tx_list);
        return ();
    }

    if (op == op::update_pubkey()) {
        throw_unless(err::access_denied(), equal_slice_bits(sender_address, admin_address));
        pubkey = in_msg_body~load_uint(256);
        save_data(total_supply, admin_address, pubkey, content, jetton_wallet_code, tx_list);
        return ();
    }

    if (op == op::mint()) {
        int jetton_amount = 100 * convert_ton_to_mat(total_supply, in_msg_value) / PRICE_MULTIPLIER();
        slice from_address = in_msg_body~load_msg_addr();
        mint_tokens(sender_address, jetton_wallet_code, jetton_amount, from_address);
        send_tax(admin_address, in_msg_value);
        save_data(total_supply + jetton_amount, admin_address, pubkey, content, jetton_wallet_code, tx_list);
        return ();
    }

    if (op == op::materia_to_ton()) {
        int amount = in_msg_body~load_coins();
        throw_unless(amount >= MIN_EXCHANGE_AMOUNT(), err::exchange_too_small());
        int ton_amount = convert_mat_to_ton(total_supply, amount);
        throw_unless(my_balance() - ton_amount >= MIN_TON_RESERVE(), err::too_little_bank_reserve());
        send_ton(sender_address, ton_amount);
        ;; send_burn(sender_address, jetton_wallet_code, amount, master_msg);
        return ();
    }

    if (op == op::receive_experience()) {
        slice signature = in_msg_body~load_ref().begin_parse();
        int xp = in_msg_body~load_uint(64);
        int timestamp = in_msg_body~load_uint(64);
        throw_unless(in_msg_value == EXPERIENCE_TOTAL_FEE(), err::zero_ton_transfer());
        var payload = begin_cell()
            .store_slice(sender_address)
            .store_uint(xp, 64)
            .store_uint(timestamp, 64)
            .end_cell();
        throw_unless(check_signature(payload.cell_hash(), signature, pubkey), err::invalid_signature());
        throw_unless(timestamp + 86400 > now(), err::signature_expired());
        add_experience(sender_address, jetton_wallet_code, add_experience_gas_consumption(), xp);
        send_tax(admin_address, in_msg_value);
        return ();
    }

    if (op == op::provide_wallet_address()) {
        throw_unless(err::amount_too_low(), in_msg_value > fwd_fee + provide_address_gas_consumption());

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
        ? begin_cell().store_slice(owner_address).end_cell()
        : null();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::take_wallet_address(), 32)
            .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);
        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(err::invalid_sender(),
            equal_slice_bits(calculate_user_jetton_wallet_address(
                from_address, my_address(), jetton_wallet_code), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address, pubkey, content, jetton_wallet_code, tx_list);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                .store_slice(response_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses(), 32)
                .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (op == op::change_admin()) {
        ;; change admin
        throw_unless(err::access_denied(), equal_slice_bits(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address, pubkey, content, jetton_wallet_code, tx_list);
        return ();
    }
    throw(0xffff);
}

;; ============================
;; Contract interfaces
;; ============================

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, int pubkey, cell content, cell jetton_wallet_code, cell tx_ids) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

cell get_tx_ids() method_id {
    (int total_supply, slice admin_address, int pubkey, cell content, cell jetton_wallet_code, cell tx_ids) = load_data();
    return tx_ids;
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, int pubkey, cell content, cell jetton_wallet_code, cell tx_ids) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}
